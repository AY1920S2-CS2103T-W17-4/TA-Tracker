@startuml
!include ../style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":TaTrackerParser" as TaTrackerParser LOGIC_COLOR
participant ":SortCommandParser" as SortCommandParser LOGIC_COLOR
participant "s:SortCommand" as SortCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Module" as Module MODEL_COLOR
participant "g:Group" as Group MODEL_COLOR
participant ":Model" as Model MODEL_COLOR
participant "M:Module" as ActualModule MODEL_COLOR
participant "G:Group" as ActualGroup MODEL_COLOR
end box

[-> LogicManager : execute("sort \nm/CS2103 g/G03 t/alpha")
activate LogicManager

LogicManager -> TaTrackerParser : parseCommand("sort \nm/CS2103 g/G03 t/alpha")
activate TaTrackerParser

create SortCommandParser
TaTrackerParser -> SortCommandParser : GroupCommandParser()
activate SortCommandParser
SortCommandParser --> TaTrackerParser
deactivate SortCommandParser

TaTrackerParser -> SortCommandParser : parseCommand("m/CS2103 g/G03 t/alpha")
activate SortCommandParser

create Module
SortCommandParser -> Module : Module("CS2103", "")
activate Module
Module --> SortCommandParser
deactivate Module

create Group
SortCommandParser -> Group : Group("G03", null)
activate Group
Group --> SortCommandParser
deactivate Group

create SortCommand
SortCommandParser -> SortCommand : SortCommand(g, m, "alpha")
activate SortCommand
SortCommand --> SortCommandParser
deactivate SortCommand

SortCommandParser --> TaTrackerParser : s
deactivate SortCommandParser
SortCommandParser -[hidden]-> TaTrackerParser
destroy SortCommandParser

TaTrackerParser --> LogicManager : s
deactivate TaTrackerParser

LogicManager -> SortCommand : execute()
activate SortCommand

SortCommand -> Model : hasModule(m)
activate Model
Model --> SortCommand : true
deactivate Model

SortCommand -> Model : getModule(m)
activate Model
Model --> SortCommand : M
deactivate Model

SortCommand -> ActualModule : hasGroup(g)
activate ActualModule
ActualModule --> SortCommand : true
deactivate ActualModule

SortCommand -> ActualModule : getGroup(g)
activate ActualModule
ActualModule --> SortCommand : G
deactivate ActualModule

SortCommand -> ActualGroup : sortAlphabetically()
activate ActualGroup
ActualGroup --> SortCommand
deactivate ActualGroup

create CommandResult
SortCommand -> CommandResult : CommandResult(SuccessMessage)
activate CommandResult
CommandResult --> SortCommand
deactivate CommandResult

SortCommand --> LogicManager : result
deactivate SortCommand

[<--LogicManager
deactivate LogicManager
@enduml
